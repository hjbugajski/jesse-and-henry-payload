/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type LinkArrayField = {
  color: 'neutral' | 'neutral-variant' | 'primary' | 'secondary' | 'tertiary' | 'danger';
  text: string;
  icon?: string;
  type: 'internal' | 'external';
  relationship: string | Page;
  anchor?: string;
  url: string;
  rel?: 'noreferrer'[];
  newTab?: boolean;
  id?: string;
}[];

export interface Config {
  collections: {
    guests: Guest;
    media: Media;
    pages: Page;
    parties: Party;
    relations: Relation;
    sides: Side;
    users: User;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    navigation: Navigation;
  };
}
export interface Guest {
  id: string;
  first?: string;
  middle?: string;
  last?: string;
  party?: string | Party;
  side?: string | Side;
  relation?: string | Relation;
  phone?: string;
  address?: string;
  rsvpWelcomeParty?: 'accept' | 'decline';
  rsvpWedding?: 'accept' | 'decline';
  rsvpBrunch?: 'accept' | 'decline';
  sort?: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password: string;
}
export interface Party {
  id: string;
  value: string;
  color?: 'green' | 'teal' | 'cyan' | 'blue' | 'violet' | 'purple' | 'plum' | 'pink' | 'red' | 'orange';
  sort?: number;
  code?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Side {
  id: string;
  value: string;
  color?: 'green' | 'teal' | 'cyan' | 'blue' | 'violet' | 'purple' | 'plum' | 'pink' | 'red' | 'orange';
  sort?: number;
  updatedAt: string;
  createdAt: string;
}
export interface Relation {
  id: string;
  value: string;
  color?: 'green' | 'teal' | 'cyan' | 'blue' | 'violet' | 'purple' | 'plum' | 'pink' | 'red' | 'orange';
  sort?: number;
  updatedAt: string;
  createdAt: string;
}
export interface Media {
  id: string;
  alt: string;
  dataUrl?: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
  sizes?: {
    preview?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
    thumbnail?: {
      url?: string;
      width?: number;
      height?: number;
      mimeType?: string;
      filesize?: number;
      filename?: string;
    };
  };
}
export interface Page {
  id: string;
  slug?: string;
  protected?: boolean;
  name: string;
  meta: {
    title: string;
    description: string;
  };
  content: {
    layout?: (AlertBlock | ContentBlock | HeroBlock | SectionBlock)[];
  };
  updatedAt: string;
  createdAt: string;
  _status?: 'draft' | 'published';
}
export interface AlertBlock {
  title: string;
  icon: string;
  content: {
    [k: string]: unknown;
  }[];
  color: 'neutral' | 'neutral-variant' | 'primary' | 'secondary' | 'tertiary' | 'danger';
  action?: boolean;
  link?: LinkGroupField;
  width?: 'full' | 'max';
  id?: string;
  blockName?: string;
  blockType: 'alert';
}
export interface LinkGroupField {
  text: string;
  icon?: string;
  type: 'internal' | 'external';
  relationship: string | Page;
  anchor?: string;
  url: string;
  rel?: 'noreferrer'[];
  newTab?: boolean;
}
export interface ContentBlock {
  width?: 'full' | 'max';
  content: {
    [k: string]: unknown;
  }[];
  id?: string;
  blockName?: string;
  blockType: 'content';
}
export interface HeroBlock {
  titleOne: string;
  titleTwo: string;
  subtitle: string;
  image: string | Media;
  id?: string;
  blockName?: string;
  blockType: 'hero';
}
export interface SectionBlock {
  anchorId: string;
  title: string;
  description?: {
    [k: string]: unknown;
  }[];
  border: 'none' | 'left' | 'right';
  layout?: (AlertBlock | ButtonLinksBlock | ContentBlock | PhotosBlock)[];
  id?: string;
  blockName?: string;
  blockType: 'section';
}
export interface ButtonLinksBlock {
  links?: LinkArrayField;
  id?: string;
  blockName?: string;
  blockType: 'buttonLinks';
}
export interface PhotosBlock {
  photos: string[] | Media[];
  id?: string;
  blockName?: string;
  blockType: 'photos';
}
export interface User {
  id: string;
  roles: ('admin' | 'public')[];
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password: string;
}
export interface PayloadPreference {
  id: string;
  user:
    | {
        relationTo: 'guests';
        value: string | Guest;
      }
    | {
        relationTo: 'users';
        value: string | User;
      };
  key?: string;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface PayloadMigration {
  id: string;
  name?: string;
  batch?: number;
  updatedAt: string;
  createdAt: string;
}
export interface Navigation {
  id: string;
  links?: LinkArrayField;
  updatedAt?: string;
  createdAt?: string;
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
